name: exercises
on: [push, pull_request]

jobs:
  exercises:
    strategy:
      fail-fast: false
      matrix:
        include:
          - nim: stable
            os: linux

          - nim: stable
            os: macOS

          - nim: stable
            os: windows

          - nim: devel
            os: linux

          - nim: '1.0'
            os: linux

    name: nim-${{ matrix.nim }}-${{ matrix.os }}
    runs-on: ${{ matrix.os == 'linux' && 'ubuntu-20.04' || (matrix.os == 'macOS' && 'macos-10.15' || 'windows-2019') }}

    steps:
      - name: Checkout exercism/nim
        uses: actions/checkout@v2.3.4

      - name: Set BRANCH environmental variable
        shell: bash # Changes the default shell on Windows.
        run: |
          to_branch() {
            # Converts a Nim version string to a `nim-lang/Nim` branch name
            # that `alaviss/setup-nim` can use as a `version` parameter.
            # Examples:
            #   1.4.2  ->  version-1-4
            #   1.0    ->  version-1-0
            major_dot_minor="$(cut -d'.' -f1,2 <<< "$1")"
            printf "version-${major_dot_minor/./-}"
          }
          case ${{ matrix.nim }} in
            'stable')
              latest="$(curl -sSfL --retry 3 https://nim-lang.org/channels/stable)"
              branch_name="$(to_branch "${latest}")"
              ;;
            *\.*)
              branch_name="$(to_branch ${{ matrix.nim }})"
              ;;
            *)
              branch_name=${{ matrix.nim }}
              ;;
          esac
          echo "BRANCH=${branch_name}" >> "${GITHUB_ENV}"

      - name: Install Nim
        uses: alaviss/setup-nim@f81f2a6d1505ab32f440ec9d8adbb81e949d3bf0 # 0.1.1
        with:
          path: 'nim'
          version: ${{ env.BRANCH }}

      - name: Show versions of Nim and Nimble
        run: |
          nim --version
          printf '\n\n\n\n'
          nimble --version

      - name: Compile `check_exercises.nim`
        run: nim c --styleCheck:hint _test/check_exercises.nim

      - name: Run `check_exercises`
        run: _test/check_exercises
